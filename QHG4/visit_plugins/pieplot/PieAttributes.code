Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const PieAttributes &obj);
Definition:
//--------------------------------------------------------------------
// ChangesRequireRecalculation
//   check if a attribute has changed which requires a recalculation.
//   currently, only changes in fScale1 entail recalculation
//
bool
PieAttributes::ChangesRequireRecalculation(const PieAttributes &obj)
{
    return true;
}

Target: xml2info
Function: PieViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
Definition:
// ****************************************************************************
//  Method: PieViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    plot      The viewer plot whose attributes are getting initialized.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
// ****************************************************************************
void
PieViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,    const avtPlotMetaData &plot)

{
    *(PieAttributes*)atts = *defaultAtts;

    PrivateSetPlotAtts(atts, plot);
}

Function: PieViewerEnginePluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
Definition:
void
PieViewerEnginePluginInfo::ReInitializePlotAtts(AttributeSubject *atts,    const avtPlotMetaData &plot)

{
    PrivateSetPlotAtts(atts, plot);
}

Function: PieViewerEnginePluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
Definition:
void
PieViewerEnginePluginInfo::ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: PieViewerEnginePluginInfo::PrivateSetPlotAtts
Declaration: void PrivateSetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
Definition:
void
PieViewerEnginePluginInfo::PrivateSetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &plot)
{
    PieAttributes *pieAtts= (PieAttributes *)atts;

    debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] atts is " << pieAtts << endl << std::flush;
    debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] name is " << plot.GetVariableName() << endl << std::flush;

    const avtDatabaseMetaData *md = plot.GetMetaData();
    debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] md is " << md << endl << std::flush;
    if (md != NULL) 
    {
        // if the plot's variable is needed to know which LabelMetaData to retrieve:
        std::string vn(plot.GetVariableName());
        debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] looking for label with name [" << ("pieInfo_"+vn) << "]" << endl << std::flush;
        debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] we have " << md->GetNumLabels() << " labels" << endl << std::flush;
        for (int i = 0; i <  md->GetNumLabels(); i++) {
            const avtLabelMetaData *mdlab = md->GetLabel(i);
            if (mdlab != NULL) {
                debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts]    label " << i << " has name [" <<mdlab->name << "] and info [" << mdlab->originalName << "]" << endl << std::flush;
                
            }
        }
        const avtLabelMetaData *constLMD = md->GetLabel("pieInfo_"+vn);
        debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] avtLAbelMetaData is " << constLMD << endl << std::flush;
        if(constLMD != NULL)
        { 
            avtLabelMetaData *lmd = const_cast<avtLabelMetaData *>(constLMD);
            std::string info(lmd->originalName);
            debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] info is [" << info << "]" << endl << std::flush;
            
            // split the string to get the names
            std::vector<std::string> vComponentNames;
            size_t iPos = 0;
            while (iPos!= std::string::npos) {
                size_t iPos1 = info.find(';', iPos);
                std::string vName;
                if (iPos1 != std::string::npos) {
                    vName = info.substr(iPos, iPos1-iPos);
                    debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] found name [" << vName <<"]" << endl << std::flush;
                    iPos = iPos1+1;
                } else {
                    vName = info.substr(iPos);
                    debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] found last name [" << vName <<"]" << endl << std::flush;
                    iPos = iPos1;
                }
                vComponentNames.push_back(vName);
            }
            pieAtts->SetValueNames(vComponentNames);
            defaultAtts->SetValueNames(vComponentNames);

            // pass some initial colors
            for (uint i =0; i < vComponentNames.size(); i++) {
                ColorAttribute ca((int)basic_colors[i][0], (int)basic_colors[i][1], (int)basic_colors[i][2], (int)basic_colors[i][3]);

                pieAtts->GetMultiColor().AddColors(ca);
                defaultAtts->GetMultiColor().AddColors(ca);
            }
        } else {
            //dummy to test
            std::vector<std::string> vComponentNames;
            debug1 << "QHG: [PieViewerEnginePluginInfo::PrivateSetPlotAtts] couldn't get label meta data -> adding dummy data" << endl << std::flush;
            vComponentNames.push_back("spider");
            vComponentNames.push_back("scorpion");
            vComponentNames.push_back("crab");
            vComponentNames.push_back("octopus");
            vComponentNames.push_back("dog");
            vComponentNames.push_back("raven");
            pieAtts->SetValueNames(vComponentNames);
            defaultAtts->SetValueNames(vComponentNames);
        }
            
    }
    else
    {
       debug1 << "  couldn't retrieve meta data" << endl;
    }
    
    
}

