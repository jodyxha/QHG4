// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

package llnl.visit.plots;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import llnl.visit.ColorAttributeList;
import java.util.Vector;

// ****************************************************************************
// Class: PieAttributes
//
// Purpose:
//    Attributes for the PiePlot plot.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

public class PieAttributes extends AttributeSubject implements Plugin
{
    private static int PieAttributes_numAdditionalAtts = 12;

    // Enum values
    public final static int GLYPHSTYLE_STYLE_PIE = 0;
    public final static int GLYPHSTYLE_STYLE_BAR = 1;
    public final static int GLYPHSTYLE_STYLE_BOX = 2;


    public PieAttributes()
    {
        super(PieAttributes_numAdditionalAtts);

        iGlyphStyle = GLYPHSTYLE_STYLE_PIE;
        iPieSectors = 120;
        fPieRadius = 1f;
        fPieBorder = 0.1f;
        fBarXScale = 1f;
        fBarYScale = 1f;
        fBarBorder = 0.1f;
        fBoxXScale = 1f;
        fBoxYScale = 1f;
        fBoxBorder = 0.1f;
        multiColor = new ColorAttributeList();
        valueNames = new Vector();
    }

    public PieAttributes(int nMoreFields)
    {
        super(PieAttributes_numAdditionalAtts + nMoreFields);

        iGlyphStyle = GLYPHSTYLE_STYLE_PIE;
        iPieSectors = 120;
        fPieRadius = 1f;
        fPieBorder = 0.1f;
        fBarXScale = 1f;
        fBarYScale = 1f;
        fBarBorder = 0.1f;
        fBoxXScale = 1f;
        fBoxYScale = 1f;
        fBoxBorder = 0.1f;
        multiColor = new ColorAttributeList();
        valueNames = new Vector();
    }

    public PieAttributes(PieAttributes obj)
    {
        super(obj);

        int i;

        iGlyphStyle = obj.iGlyphStyle;
        iPieSectors = obj.iPieSectors;
        fPieRadius = obj.fPieRadius;
        fPieBorder = obj.fPieBorder;
        fBarXScale = obj.fBarXScale;
        fBarYScale = obj.fBarYScale;
        fBarBorder = obj.fBarBorder;
        fBoxXScale = obj.fBoxXScale;
        fBoxYScale = obj.fBoxYScale;
        fBoxBorder = obj.fBoxBorder;
        multiColor = new ColorAttributeList(obj.multiColor);
        valueNames = new Vector(obj.valueNames.size());
        for(i = 0; i < obj.valueNames.size(); ++i)
            valueNames.addElement(new String((String)obj.valueNames.elementAt(i)));


        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return PieAttributes_numAdditionalAtts;
    }

    public boolean equals(PieAttributes obj)
    {
        int i;

        // Compare the elements in the valueNames vector.
        boolean valueNames_equal = (obj.valueNames.size() == valueNames.size());
        for(i = 0; (i < valueNames.size()) && valueNames_equal; ++i)
        {
            // Make references to String from Object.
            String valueNames1 = (String)valueNames.elementAt(i);
            String valueNames2 = (String)obj.valueNames.elementAt(i);
            valueNames_equal = valueNames1.equals(valueNames2);
        }
        // Create the return value
        return ((iGlyphStyle == obj.iGlyphStyle) &&
                (iPieSectors == obj.iPieSectors) &&
                (fPieRadius == obj.fPieRadius) &&
                (fPieBorder == obj.fPieBorder) &&
                (fBarXScale == obj.fBarXScale) &&
                (fBarYScale == obj.fBarYScale) &&
                (fBarBorder == obj.fBarBorder) &&
                (fBoxXScale == obj.fBoxXScale) &&
                (fBoxYScale == obj.fBoxYScale) &&
                (fBoxBorder == obj.fBoxBorder) &&
                (multiColor.equals(obj.multiColor)) &&
                valueNames_equal);
    }

    public String GetName() { return "Pie"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetIGlyphStyle(int iGlyphStyle_)
    {
        iGlyphStyle = iGlyphStyle_;
        Select(0);
    }

    public void SetIPieSectors(int iPieSectors_)
    {
        iPieSectors = iPieSectors_;
        Select(1);
    }

    public void SetFPieRadius(float fPieRadius_)
    {
        fPieRadius = fPieRadius_;
        Select(2);
    }

    public void SetFPieBorder(float fPieBorder_)
    {
        fPieBorder = fPieBorder_;
        Select(3);
    }

    public void SetFBarXScale(float fBarXScale_)
    {
        fBarXScale = fBarXScale_;
        Select(4);
    }

    public void SetFBarYScale(float fBarYScale_)
    {
        fBarYScale = fBarYScale_;
        Select(5);
    }

    public void SetFBarBorder(float fBarBorder_)
    {
        fBarBorder = fBarBorder_;
        Select(6);
    }

    public void SetFBoxXScale(float fBoxXScale_)
    {
        fBoxXScale = fBoxXScale_;
        Select(7);
    }

    public void SetFBoxYScale(float fBoxYScale_)
    {
        fBoxYScale = fBoxYScale_;
        Select(8);
    }

    public void SetFBoxBorder(float fBoxBorder_)
    {
        fBoxBorder = fBoxBorder_;
        Select(9);
    }

    public void SetMultiColor(ColorAttributeList multiColor_)
    {
        multiColor = multiColor_;
        Select(10);
    }

    public void SetValueNames(Vector valueNames_)
    {
        valueNames = valueNames_;
        Select(11);
    }

    // Property getting methods
    public int                GetIGlyphStyle() { return iGlyphStyle; }
    public int                GetIPieSectors() { return iPieSectors; }
    public float              GetFPieRadius() { return fPieRadius; }
    public float              GetFPieBorder() { return fPieBorder; }
    public float              GetFBarXScale() { return fBarXScale; }
    public float              GetFBarYScale() { return fBarYScale; }
    public float              GetFBarBorder() { return fBarBorder; }
    public float              GetFBoxXScale() { return fBoxXScale; }
    public float              GetFBoxYScale() { return fBoxYScale; }
    public float              GetFBoxBorder() { return fBoxBorder; }
    public ColorAttributeList GetMultiColor() { return multiColor; }
    public Vector             GetValueNames() { return valueNames; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(iGlyphStyle);
        if(WriteSelect(1, buf))
            buf.WriteInt(iPieSectors);
        if(WriteSelect(2, buf))
            buf.WriteFloat(fPieRadius);
        if(WriteSelect(3, buf))
            buf.WriteFloat(fPieBorder);
        if(WriteSelect(4, buf))
            buf.WriteFloat(fBarXScale);
        if(WriteSelect(5, buf))
            buf.WriteFloat(fBarYScale);
        if(WriteSelect(6, buf))
            buf.WriteFloat(fBarBorder);
        if(WriteSelect(7, buf))
            buf.WriteFloat(fBoxXScale);
        if(WriteSelect(8, buf))
            buf.WriteFloat(fBoxYScale);
        if(WriteSelect(9, buf))
            buf.WriteFloat(fBoxBorder);
        if(WriteSelect(10, buf))
            multiColor.Write(buf);
        if(WriteSelect(11, buf))
            buf.WriteStringVector(valueNames);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetIGlyphStyle(buf.ReadInt());
            break;
        case 1:
            SetIPieSectors(buf.ReadInt());
            break;
        case 2:
            SetFPieRadius(buf.ReadFloat());
            break;
        case 3:
            SetFPieBorder(buf.ReadFloat());
            break;
        case 4:
            SetFBarXScale(buf.ReadFloat());
            break;
        case 5:
            SetFBarYScale(buf.ReadFloat());
            break;
        case 6:
            SetFBarBorder(buf.ReadFloat());
            break;
        case 7:
            SetFBoxXScale(buf.ReadFloat());
            break;
        case 8:
            SetFBoxYScale(buf.ReadFloat());
            break;
        case 9:
            SetFBoxBorder(buf.ReadFloat());
            break;
        case 10:
            multiColor.Read(buf);
            Select(10);
            break;
        case 11:
            SetValueNames(buf.ReadStringVector());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + indent + "iGlyphStyle = ";
        if(iGlyphStyle == GLYPHSTYLE_STYLE_PIE)
            str = str + "GLYPHSTYLE_STYLE_PIE";
        if(iGlyphStyle == GLYPHSTYLE_STYLE_BAR)
            str = str + "GLYPHSTYLE_STYLE_BAR";
        if(iGlyphStyle == GLYPHSTYLE_STYLE_BOX)
            str = str + "GLYPHSTYLE_STYLE_BOX";
        str = str + "\n";
        str = str + intToString("iPieSectors", iPieSectors, indent) + "\n";
        str = str + floatToString("fPieRadius", fPieRadius, indent) + "\n";
        str = str + floatToString("fPieBorder", fPieBorder, indent) + "\n";
        str = str + floatToString("fBarXScale", fBarXScale, indent) + "\n";
        str = str + floatToString("fBarYScale", fBarYScale, indent) + "\n";
        str = str + floatToString("fBarBorder", fBarBorder, indent) + "\n";
        str = str + floatToString("fBoxXScale", fBoxXScale, indent) + "\n";
        str = str + floatToString("fBoxYScale", fBoxYScale, indent) + "\n";
        str = str + floatToString("fBoxBorder", fBoxBorder, indent) + "\n";
        str = str + indent + "multiColor = {\n" + multiColor.toString(indent + "    ") + indent + "}\n";
        str = str + stringVectorToString("valueNames", valueNames, indent) + "\n";
        return str;
    }


    // Attributes
    private int                iGlyphStyle;
    private int                iPieSectors;
    private float              fPieRadius;
    private float              fPieBorder;
    private float              fBarXScale;
    private float              fBarYScale;
    private float              fBarBorder;
    private float              fBoxXScale;
    private float              fBoxYScale;
    private float              fBoxBorder;
    private ColorAttributeList multiColor;
    private Vector             valueNames; // vector of String objects
}

