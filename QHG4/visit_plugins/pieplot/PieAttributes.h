// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

// ****************************************************************************
//  File: PieAttributes.h
// ****************************************************************************

#ifndef PIEATTRIBUTES_H
#define PIEATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

#include <ColorAttributeList.h>
#include <ColorAttribute.h>

// ****************************************************************************
// Class: PieAttributes
//
// Purpose:
//    Attributes for the PiePlot plot.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

class PieAttributes : public AttributeSubject
{
public:
    enum GlyphStyle
    {
        STYLE_PIE,
        STYLE_BAR,
        STYLE_BOX
    };

    // These constructors are for objects of this class
    PieAttributes();
    PieAttributes(const PieAttributes &obj);
protected:
    // These constructors are for objects derived from this class
    PieAttributes(private_tmfs_t tmfs);
    PieAttributes(const PieAttributes &obj, private_tmfs_t tmfs);
public:
    virtual ~PieAttributes();

    virtual PieAttributes& operator = (const PieAttributes &obj);
    virtual bool operator == (const PieAttributes &obj) const;
    virtual bool operator != (const PieAttributes &obj) const;
private:
    void Init();
    void Copy(const PieAttributes &obj);
public:

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectMultiColor();
    void SelectValueNames();

    // Property setting methods
    void SetIGlyphStyle(GlyphStyle iGlyphStyle_);
    void SetIPieSectors(int iPieSectors_);
    void SetFPieRadius(float fPieRadius_);
    void SetFPieBorder(float fPieBorder_);
    void SetFBarXScale(float fBarXScale_);
    void SetFBarYScale(float fBarYScale_);
    void SetFBarBorder(float fBarBorder_);
    void SetFBoxXScale(float fBoxXScale_);
    void SetFBoxYScale(float fBoxYScale_);
    void SetFBoxBorder(float fBoxBorder_);
    void SetMultiColor(const ColorAttributeList &multiColor_);
    void SetValueNames(const stringVector &valueNames_);

    // Property getting methods
    GlyphStyle               GetIGlyphStyle() const;
    int                      GetIPieSectors() const;
    float                    GetFPieRadius() const;
    float                    GetFPieBorder() const;
    float                    GetFBarXScale() const;
    float                    GetFBarYScale() const;
    float                    GetFBarBorder() const;
    float                    GetFBoxXScale() const;
    float                    GetFBoxYScale() const;
    float                    GetFBoxBorder() const;
    const ColorAttributeList &GetMultiColor() const;
          ColorAttributeList &GetMultiColor();
    const stringVector       &GetValueNames() const;
          stringVector       &GetValueNames();

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);

    // Enum conversion functions
    static std::string GlyphStyle_ToString(GlyphStyle);
    static bool GlyphStyle_FromString(const std::string &, GlyphStyle &);
protected:
    static std::string GlyphStyle_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

    // User-defined methods
    bool ChangesRequireRecalculation(const PieAttributes &obj);

    // IDs that can be used to identify fields in case statements
    enum {
        ID_iGlyphStyle = 0,
        ID_iPieSectors,
        ID_fPieRadius,
        ID_fPieBorder,
        ID_fBarXScale,
        ID_fBarYScale,
        ID_fBarBorder,
        ID_fBoxXScale,
        ID_fBoxYScale,
        ID_fBoxBorder,
        ID_multiColor,
        ID_valueNames,
        ID__LAST
    };

private:
    int                iGlyphStyle;
    int                iPieSectors;
    float              fPieRadius;
    float              fPieBorder;
    float              fBarXScale;
    float              fBarYScale;
    float              fBarBorder;
    float              fBoxXScale;
    float              fBoxYScale;
    float              fBoxBorder;
    ColorAttributeList multiColor;
    stringVector       valueNames;

    // Static class format string for type map.
    static const char *TypeMapFormatString;
    static const private_tmfs_t TmfsStruct;
};
#define PIEATTRIBUTES_TMFS "iiffffffffas*"

#endif
