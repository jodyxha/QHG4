/*****************************************************************************
*
* Copyright (c) 2000 - 2013, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/


// ************************************************************************* //
//                            avtQDFFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_QDF_FILE_FORMAT_H
#define AVT_QDF_FILE_FORMAT_H

#include <avtSTSDFileFormat.h>

#include <hdf5.h>
#include <vector>
#include <map>
#include <cstdlib>
#include "QDFVisitUtils.h"

// ****************************************************************************
//  Class: avtQDFFileFormat
//
//  Purpose:
//      Reads in QDF files as a plugin to VisIt.
//
//  Programmer: simone -- generated by xml2avt
//  Creation:   Mon Mar 3 15:13:58 PST 2014
//
// ****************************************************************************
typedef std::pair<std::string, hid_t> truename_group;
typedef std::pair<hid_t, hid_t>       group_type;
typedef std::pair<std::string, group_type> name_group;
typedef std::map<std::string, hid_t>  named_handles;

class avtQDFFileFormat : public avtSTSDFileFormat
{
  public:
                       avtQDFFileFormat(const char *filename);
    virtual           ~avtQDFFileFormat() {;};

    //
    // This is used to return unconvention data -- ranging from material
    // information to information about block connectivity.
    //
    // virtual void      *GetAuxiliaryData(const char *var, const char *type,
    //                                  void *args, DestructorFunction &);
    //

    //
    // These are used to declare what the current time and cycle are for the
    // file.  These should only be defined if the file format knows what the
    // time and/or cycle is.
    //
    // virtual bool      ReturnsValidCycle() const { return true; };
    // virtual int       GetCycle(void);
    // virtual bool      ReturnsValidTime() const { return true; };
    // virtual double    GetTime(void);
    //

    virtual const char    *GetType(void)   { return "QDF"; };
    virtual void           FreeUpResources(void); 

    virtual vtkDataSet    *GetMesh(const char *);
    virtual vtkDataArray  *GetVar(const char *);
    virtual vtkDataArray  *GetVectorVar(const char *varname);

    virtual void    ActivateTimestep();
    virtual void    Initialize();
  protected:
    // DATA MEMBERS

    virtual void           PopulateDatabaseMetaData(avtDatabaseMetaData *);

    void            findPopSubGroups();
    void            findPieSubGroups();
    void            findVecSubGroups();
    void            findSubPopSubGroups();
    void            createGridMetaData(avtDatabaseMetaData *md);
    void            createGeographyMetaData(avtDatabaseMetaData *md);
    void            createClimateMetaData(avtDatabaseMetaData *md);
    void            createVegetationMetaData(avtDatabaseMetaData *md);
    void            createNavigationMetaData(avtDatabaseMetaData *md);
    void            createPopulationMetaData(avtDatabaseMetaData *md);
    void            createPieMetaData(avtDatabaseMetaData *md);
    void            createVecMetaData(avtDatabaseMetaData *md);
    void            createSubPopulationMetaData(avtDatabaseMetaData *md);
    vtkDataSet* GetRectMesh();
    vtkDataSet* GetHexMesh();
    vtkDataSet* GetIcoEqMesh();
   
    vtkDataSet* GetAgentFlatMesh(const char *popname);
    vtkDataSet* GetAgentIcoEqMesh(const char *popname);
    vtkDataSet* GetNavMesh();
    vtkDataSet* GetPieMesh(const char *piename);
    vtkDataSet* GetVecMesh(const char *piename);

    vtkDataArray* GetQDFScalar(hid_t, const char*);
    vtkDataArray* GetQDFScalarMulti(hid_t, const char*);
    vtkDataArray* GetQDFVegScalar(const char*);
    vtkDataArray* GetQDFAgentNumber(const char*);
    vtkDataArray* GetQDFAgentScalar(const char*);
    vtkDataArray* GetQDFPopScalar(const char*);
    vtkDataArray* GetQDFPieVectorVar(const char*);  
    vtkDataArray* GetQDFVecVectorVar(const char*);  
    
  
    inline double GeoDeviation() { return (2.0*rand()/(double)RAND_MAX) - 1; };

    hid_t getHandle(named_handles &mapHandles, const char *pName);

    virtual bool          HasInvariantMetaData(void) const { return false; };

    bool    m_initialized;
    char    m_sFileName[256];
    hid_t   m_hFile;
    hid_t   m_hGridGroup;
    hid_t   m_hGeoGroup;
    hid_t   m_hClimateGroup;
    hid_t   m_hVegGroup;
  
    hid_t   m_hNavGroup;
    hid_t   m_hPopGroup;
    hid_t   m_hPieGroup;
    hid_t   m_hVecGroup;

    H5G_info_t m_infoPopGroup; 
    H5G_info_t m_infoSubPopGroup; 
    int     m_nVegSpecies;
    int     m_nPops;
    std::map<std::string, int> m_mapNSubPops;
    std::map<std::string, int> m_mapNAgents;
    std::map<std::string, hid_t> m_mapDataAgents;
    std::map<std::string, truename_group> m_mapSpecialAgentVars;

    std::map<std::string, hid_t> m_mapAgentGroups;

    std::map< std::string, name_group> m_mapAgentFields; 
    std::vector<std::string>     m_vPopNames;
    std::vector<std::string>     m_vSubPopNames;
    std::map<std::string, std::string>     m_mSubPopNamesFull;

    int     m_nPies;
    std::vector<std::string>     m_vPieNames;
    named_handles m_mapPieSubGroups; // name->PieSubGroup
  
    int     m_nVecs;
    std::vector<std::string>     m_vVecNames;
    named_handles m_mapVecSubGroups; // name->VecSubGroup

  
    char    m_sGridType[64];
    float   m_fMinDistance;
    int     m_iSubDivs;
};


#endif

